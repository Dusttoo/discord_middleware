{"version":3,"file":"main.js","mappings":"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","sources":["webpack://discord-bot-integration/webpack/bootstrap","webpack://discord-bot-integration/webpack/runtime/define property getters","webpack://discord-bot-integration/webpack/runtime/hasOwnProperty shorthand","webpack://discord-bot-integration/./scripts/utils/debuggingUtils.js","webpack://discord-bot-integration/./scripts/renderTemplates.js","webpack://discord-bot-integration/./scripts/api.js","webpack://discord-bot-integration/./scripts/hooks.js","webpack://discord-bot-integration/./scripts/socket.js","webpack://discord-bot-integration/./scripts/index.js","webpack://discord-bot-integration/./scripts/settings.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { MODULE_NAME } from \"../index.js\";\nexport function debugLog(message, ...optionalParams) {\n  if (!game || !game.settings) {\n    console.warn(`[${MODULE_NAME} Debug] Game settings not available`);\n    return;\n  }\n  const debugMode = game.settings.get(MODULE_NAME, \"debugMode\");\n  if (debugMode) {\n    console.log(`[${MODULE_NAME} Debug] ${message}`, ...optionalParams);\n  } else {\n    console.log(\"[Discord Bot Integration] Debug mode is disabled.\");\n  }\n}\n","export async function renderCharacterStats(actor) {\n  const templatePath = \"modules/discord-bot-integration/templates/character-stats.html\";\n\n  const characterData = {\n    name: actor.name,\n    hp: actor.system.attributes.hp.value,\n    maxHp: actor.system.attributes.hp.max,\n    ac: actor.system.attributes.ac.value,\n    abilities: Object.entries(actor.system.abilities).map(([key, value]) => ({\n      name: key.toUpperCase(), \n      value: value.value,\n      mod: value.mod,\n      dc: value.dc\n    })),\n  };\n\n  const htmlContent = await renderTemplate(templatePath, characterData);\n  ChatMessage.create({ content: htmlContent, whisper: ChatMessage.getWhisperRecipients(\"GM\") });\n}\n  \n  export async function renderInventory(actor) {\n    const templatePath = \"modules/discord-bot-integration/templates/inventory.html\";\n    const inventoryData = {\n      inventory: actor.items.map(item => ({\n        name: item.name,\n        quantity: item.system.quantity || 1,\n        equipped: item.system.equipped || false,\n      })),\n    };\n    const htmlContent = await renderTemplate(templatePath, inventoryData);\n    ChatMessage.create({ content: htmlContent, whisper: ChatMessage.getWhisperRecipients(\"GM\") });\n  }\n  \n  export async function renderSpellDetails(actor, spellId) {\n    const spell = actor.items.get(spellId);\n    if (!spell || spell.type !== \"spell\") return;\n  \n    const templatePath = \"modules/discord-bot-integration/templates/spell-details.html\";\n    const spellData = {\n      name: spell.name,\n      level: spell.system.level,\n      description: spell.system.description.value,\n      uses: spell.system.uses,\n    };\n    const htmlContent = await renderTemplate(templatePath, spellData);\n    ChatMessage.create({ content: htmlContent, whisper: ChatMessage.getWhisperRecipients(\"GM\") });\n  }\n  \n  export async function renderTurnNotification(actor) {\n    const templatePath = \"modules/discord-bot-integration/templates/turn-notification.html\";\n    const turnData = {\n      combatantName: actor.name,\n      currentHp: actor.system.attributes.hp.value,\n      maxHp: actor.system.attributes.hp.max,\n      ac: actor.system.attributes.ac.value,\n    };\n    const htmlContent = await renderTemplate(templatePath, turnData);\n    ChatMessage.create({ content: htmlContent });\n  }","import { sendToDiscord } from \"./socket\";\nimport { debugLog } from \"./utils/debuggingUtils\";\nimport { MODULE_NAME } from \"./index\";\nimport {\n  renderCharacterStats,\n  renderInventory,\n  renderSpellDetails,\n  renderTurnNotification,\n} from \"./renderTemplates\";\ndebugLog(`${MODULE_NAME} setting up api...`);\n\nexport async function getCharacterStats(request) {\n  debugLog(`${MODULE_NAME} | getCharacterStats:`, request.actorId);\n\n  if (!game.ready) {\n    console.warn(\n      `${MODULE_NAME} | Game is not ready. Cannot access actors yet.`\n    );\n    return { error: \"Game is not ready. Please try again shortly.\" };\n  }\n\n  const actor = game.actors.get(request.actorId);\n  debugLog(\n    `${MODULE_NAME} | Current game.actors Map:`,\n    Array.from(game.actors.entries())\n  );\n\n  if (!actor) {\n    debugLog(\n      `${MODULE_NAME} | Actor with ID ${request.actorId} not found`\n    );\n    console.warn(\n      `Actor with ID ${request.actorId} not found in game.actors`\n    );\n    return { error: `Actor with ID ${request.actorId} not found` };\n  }\n\n  const abilities = Object.keys(actor.system.abilities).reduce((acc, key) => {\n    acc[key] = {\n      value: actor.system.abilities[key].value,\n      mod: actor.system.abilities[key].mod,\n      dc: actor.system.abilities[key].dc,\n    };\n    return acc;\n  }, {});\n\n  const characterStats = {\n    name: actor.name,\n    hp: {\n      value: actor.system.attributes.hp.value,\n      max: actor.system.attributes.hp.max,\n      temp: actor.system.attributes.hp.temp || 0,\n    },\n    ac: actor.system.attributes.ac.value,\n    abilities: abilities,\n  };\n\n  await renderCharacterStats(actor);\n\n  return characterStats;\n}\n\nexport async function getCharacterInventory(request) {\n  debugLog(`${MODULE_NAME} | getCharacterInventory:`, request.actorId);\n  const actor = game.actors.get(request.actorId);\n  if (!actor) {\n    debugLog(`${MODULE_NAME} | Actor with ID ${request.actorId} not found`);\n    console.warn(`Actor with ID ${request.actorId} not found`);\n    return [];\n  }\n\n  await renderInventory(actor);\n\n  debugLog(`${MODULE_NAME} | getCharacterInventory:`, actor.items);\n\n  return actor.items\n    .filter((item) =>\n      [\"loot\", \"equipment\", \"weapon\", \"consumable\", \"tool\"].includes(item.type)\n    )\n    .map((item) => ({\n      name: item.name,\n      quantity: item.system.quantity,\n      equipped: item.system.equipped,\n    }));\n}\n\nexport async function getCharacterSpells(request) {\n  debugLog(`${MODULE_NAME} | getCharacterSpells:`, request.actorId);\n  const actor = game.actors.get(request.actorId);\n  if (!actor) {\n    debugLog(`${MODULE_NAME} | Actor with ID ${request.actorId} not found`);\n    console.warn(`Actor with ID ${request.actorId} not found`);\n    return [];\n  }\n\n  await renderSpellDetails(actor);\n  debugLog(`${MODULE_NAME} | getCharacterSpells:`, actor.items);\n  return actor.items\n    .filter((item) => item.type === \"spell\")\n    .map((spell) => ({\n      name: spell.name,\n      level: spell.system.level,\n      description: spell.system.description.value,\n      uses: spell.system.uses,\n    }));\n}\n\nexport function handleError(error) {\n  debugLog(`${MODULE_NAME} | API Error:`, error);\n  console.error(\"API Error:\", error);\n  return { success: false, message: error.message };\n}\n\nexport async function sendCharacterSpells(request, requestId) {\n  const actor = game.actors.get(request.actorId);\n  if (!actor) {\n    debugLog(`${MODULE_NAME} | Actor with ID ${request.actorId} not found`);\n    console.warn(`Actor with ID ${request.actorId} not found`);\n    return;\n  }\n\n  const spells = actor.items\n    .filter((item) => item.type === \"spell\")\n    .map((spell) => ({\n      name: spell.name,\n      level: spell.system.level,\n      description: spell.system.description.value,\n      uses: spell.system.uses,\n    }));\n\n  debugLog(`${MODULE_NAME} | sendCharacterSpells:`, request.actorId, spells);\n\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"characterSpells\",\n    requestId,\n    spells,\n  });\n  return spells;\n}\n\nexport async function updateCharacterHP(request) {\n  const { actorId, hpChange, requestId } = request;\n  debugLog(`${MODULE_NAME} | updateCharacterHP:`, actorId, Number(hpChange));\n\n  try {\n    const actor = game.actors.get(actorId);\n    if (!actor) {\n      debugLog(`${MODULE_NAME} | Actor with ID ${actorId} not found`);\n      console.warn(`Actor with ID ${actorId} not found`);\n      return;\n    }\n\n    const currentHP = actor.system.attributes.hp.value;\n    const newHP = Math.max(0, currentHP + Number(hpChange));\n\n    await actor.updateSource({ \"system.attributes.hp.value\": newHP });\n\n    if (actor.sheet?.rendered) {\n      actor.sheet.render(true);\n    }\n\n    await game.socket.emit(\"module.discord-bot-integration\", {\n      action: \"characterHPUpdated\",\n      requestId,\n      newHP,\n    });\n\n    return newHP;\n  } catch (error) {\n    console.error(\n      `${MODULE_NAME} | Error updating HP for actor ID ${actorId}:`,\n      error\n    );\n  }\n}\n\nexport async function updateCharacterCondition(request) {\n  const { actorId, condition, add, requestId } = request;\n  const actor = game.actors.get(actorId);\n\n  if (!actor) {\n    debugLog(`${MODULE_NAME} | Actor with ID ${actorId} not found`);\n    console.warn(`Actor with ID ${actorId} not found`);\n    return;\n  }\n\n  try {\n    // Fetch current active effects\n    let existingEffects = actor.effects.map((effect) => effect.label);\n    const conditionExists = existingEffects.includes(condition);\n\n    if (add && !conditionExists) {\n      // Add the condition if not already present\n      await actor.createEmbeddedDocuments(\"ActiveEffect\", [\n        {\n          label: condition,\n          icon: getConditionIcon(condition), // Use helper function for flexible icon assignment\n          origin: actor.uuid, // Set origin for more context in the effect\n          \"flags.core.statusId\": condition, // Use status ID flag for consistent identification\n          disabled: false,\n        },\n      ]);\n    } else if (!add && conditionExists) {\n      // Remove the condition if it exists\n      const effect = actor.effects.find((e) => e.label === condition);\n      await effect.delete();\n    }\n\n    // Refresh effects list after modification\n    existingEffects = actor.effects.map((effect) => effect.label);\n\n    debugLog(\n      `${MODULE_NAME} | updateCharacterCondition:`,\n      actorId,\n      condition,\n      add\n    );\n\n    // Emit socket event for integration\n    game.socket.emit(`module.discord-bot-integration`, {\n      action: \"characterConditionUpdated\",\n      requestId,\n      condition,\n      status: add ? \"added\" : \"removed\",\n    });\n\n    return `${condition} ${add ? \"added\" : \"removed\"}`;\n  } catch (error) {\n    console.error(\n      `${MODULE_NAME} | Error updating condition for actor ID ${actorId}:`,\n      error\n    );\n    throw error;\n  }\n}\n\nfunction getConditionIcon(condition) {\n  const conditionIcons = {\n    Poisoned: \"icons/svg/status/poison.svg\",\n    Stunned: \"icons/svg/status/stun.svg\",\n    Blinded: \"icons/svg/status/blind.svg\",\n    // Add other conditions and their icons as needed\n  };\n  return conditionIcons[condition] || \"icons/svg/status/default.svg\"; // Fallback to a default icon\n}\n\nexport async function updateResource(request) {\n  const { actorId, resourceName, value, requestId } = request;\n  const actor = game.actors.get(actorId);\n  if (!actor) {\n    debugLog(`${MODULE_NAME} | Actor with ID ${actorId} not found`);\n    console.warn(`Actor with ID ${actorId} not found`);\n    return;\n  }\n\n  const resources = actor.system.resources;\n  if (resources[resourceName]) {\n    await actor.update({ [`system.resources.${resourceName}.value`]: value });\n  } else {\n    console.warn(`Resource ${resourceName} not found for actor ${actorId}`);\n    return `Resource ${resourceName} not found for actor ${actorId}`;\n  }\n\n  debugLog(`${MODULE_NAME} | updateResource:`, actorId, resourceName, value);\n\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"characterResourceUpdated\",\n    requestId,\n    resourceName,\n    newValue: value,\n  });\n\n  return `${resourceName} updated to ${value}`;\n}\n\nexport async function addItemToInventory(request) {\n  const { actorId, itemData, requestId } = request;\n  const actor = game.actors.get(actorId);\n\n  if (!actor) {\n    debugLog(`${MODULE_NAME} | Actor with ID ${actorId} not found`);\n    console.warn(`Actor with ID ${actorId} not found`);\n    return;\n  }\n\n  // Check for an existing item with the same name\n  const existingItem = actor.items.find((i) => i.name === itemData.name);\n\n  if (existingItem) {\n    // Stack quantity if the item already exists\n    const newQuantity =\n      (existingItem.system.quantity || 1) + (itemData.system.quantity || 1);\n    await existingItem.update({ \"system.quantity\": newQuantity });\n\n    debugLog(\n      `${MODULE_NAME} | Updated quantity of existing item:`,\n      existingItem.id,\n      newQuantity\n    );\n\n    game.socket.emit(`module.discord-bot-integration`, {\n      action: \"itemQuantityUpdated\",\n      requestId,\n      itemId: existingItem.id,\n      itemName: existingItem.name,\n      newQuantity,\n    });\n\n    return existingItem;\n  } else {\n    // Try adding a new item to the actor's inventory\n    try {\n      const createdItems = await actor.createEmbeddedDocuments(\"Item\", [itemData]);\n\n      if (createdItems.length > 0) {\n        const newItem = createdItems[0]; // Access the first item created\n\n        debugLog(`${MODULE_NAME} | addItemToInventory:`, actor.id, itemData, newItem);\n\n        game.socket.emit(`module.discord-bot-integration`, {\n          action: \"itemAddedToInventory\",\n          requestId,\n          itemId: newItem.id,\n          itemName: newItem.name,\n        });\n\n        return newItem;\n      } else {\n        console.warn(`${MODULE_NAME} | Failed to add item to inventory for actor ${actorId}`);\n        return null;\n      }\n    } catch (error) {\n      console.error(`Error adding item to inventory:`, error);\n      debugLog(`${MODULE_NAME} | Error adding item to inventory:`, error);\n      return null;\n    }\n  }\n}\n\nexport async function removeItemFromInventory(request) {\n  const { actorId, itemId, requestId, quantity = 1 } = request;\n  const actor = game.actors.get(actorId);\n\n  if (!actor) {\n    debugLog(`${MODULE_NAME} | Actor with ID ${actorId} not found`);\n    console.warn(`Actor with ID ${actorId} not found`);\n    return;\n  }\n\n  const item = actor.items.get(itemId);\n  if (!item) {\n    console.warn(`Item with ID ${itemId} not found in inventory`);\n    return;\n  }\n\n  const currentQuantity = item.system.quantity || 1;\n\n  if (currentQuantity > quantity) {\n    const newQuantity = currentQuantity - quantity;\n    await item.update({ \"system.quantity\": newQuantity });\n    debugLog(`${MODULE_NAME} | Updated quantity of item:`, itemId, newQuantity);\n\n    game.socket.emit(`module.discord-bot-integration`, {\n      action: \"itemQuantityUpdated\",\n      requestId,\n      itemId,\n      itemName: item.name,\n      newQuantity,\n    });\n\n    return item;\n  } else {\n    await item.delete();\n    debugLog(`${MODULE_NAME} | removeItemFromInventory:`, actorId, itemId);\n\n    game.socket.emit(`module.discord-bot-integration`, {\n      action: \"itemRemovedFromInventory\",\n      requestId,\n      itemId,\n      itemName: item.name,\n    });\n\n    return `Item ${item.name} removed from inventory`;\n  }\n}\n\nexport async function getItemDetails(request) {\n  const { actorId, itemId, requestId } = request;\n  const actor = game.actors.get(actorId);\n  if (!actor) {\n    debugLog(`${MODULE_NAME} | Actor with ID ${actorId} not found`);\n    console.warn(`Actor with ID ${actorId} not found`);\n    return;\n  }\n\n  const item = actor.items.get(itemId);\n  if (!item) {\n    console.warn(`Item with ID ${itemId} not found in inventory`);\n    return;\n  }\n\n  debugLog(`${MODULE_NAME} | getItemDetails:`, actorId, itemId);\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"itemDetails\",\n    requestId,\n    itemDetails: {\n      name: item.name,\n      description: item.system.description.value,\n      quantity: item.system.quantity,\n      weight: item.system.weight,\n      effects: item.system.effects,\n    },\n  });\n  return item;\n}\n\nexport async function rollInitiative(request) {\n  const { requestId, actorId } = request;\n  const actor = game.actors.get(actorId);\n\n  if (!actor) {\n    debugLog(`${MODULE_NAME} | Actor with ID ${actorId} not found`);\n    console.warn(`Actor with ID ${actorId} not found`);\n    return;\n  }\n\n  // Ensure the actor is part of the combat\n  if (!game.combat) {\n    debugLog(`${MODULE_NAME} | No active combat encounter found`);\n    return `No active combat encounter found.`;\n  }\n\n  // Find or create a combatant for this actor in the current combat encounter\n  let combatant = game.combat.combatants.find((c) => c.actorId === actorId);\n  if (!combatant) {\n    try {\n      await game.combat.createEmbeddedDocuments(\"Combatant\", [{ actorId }]);\n      combatant = game.combat.combatants.find((c) => c.actorId === actorId);\n      debugLog(`${MODULE_NAME} | Combatant added:`, combatant);\n    } catch (error) {\n      console.error(`${MODULE_NAME} | Error adding combatant:`, error);\n      return `Failed to add ${actor.name} to combat.`;\n    }\n  }\n\n  // Roll initiative for the actor\n  await actor.rollInitiative();\n\n  // Retry mechanism to fetch updated initiative\n  let initiative = undefined;\n  let retries = 0;\n  while (initiative === undefined && retries < 5) {\n    await new Promise((resolve) => setTimeout(resolve, 100)); // Delay for 100ms\n    initiative = game.combat.combatants.find((c) => c.actorId === actorId)?.initiative;\n    retries++;\n  }\n\n  debugLog(\n    `${MODULE_NAME} | rollInitiative:`,\n    actorId,\n    initiative,\n    combatant?.id\n  );\n\n  // Emit socket event with the initiative result\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"initiativeRolled\",\n    requestId,\n    actorName: actor.name,\n    initiative: initiative,\n  });\n\n  return `Initiative rolled for ${actor.name} with result: ${initiative ?? \"unavailable\"}`;\n}\n\nexport async function sendTurnNotification(request) {\n  const { requestId } = request;\n  const combat = game.combats.active;\n  debugLog(`${MODULE_NAME} | sendTurnNotification - combat:`, game.combats);\n  if (!combat) {\n    debugLog(`${MODULE_NAME} | No active combat found`);\n    console.warn(\"No active combat found\");\n    return;\n  }\n  const currentCombatant = combat.combatant;\n  renderTurnNotification(currentCombatant.actor);\n  debugLog(\n    `${MODULE_NAME} | sendTurnNotification:`,\n    currentCombatant.actor.name\n  );\n  if (currentCombatant) {\n    game.socket.emit(`module.discord-bot-integration`, {\n      action: \"turnNotification\",\n      requestId,\n      combatantName: currentCombatant.actor.name,\n      combatantId: currentCombatant.actor.id,\n    });\n  }\n  return `Turn notification sent for ${currentCombatant.actor.name}`;\n}\n\nexport async function sendCombatSummary(requestId) {\n  const combat = game.combats.active;\n  if (!combat) {\n    debugLog(`${MODULE_NAME} | No active combat found`);\n    console.warn(\"No active combat found\");\n    return `No active combat found`;\n  }\n\n  const combatants = combat.combatants.map((combatant) => ({\n    name: combatant.actor.name,\n    initiative: combatant.initiative,\n    id: combatant.actor.id,\n  }));\n\n  debugLog(`${MODULE_NAME} | sendCombatSummary:`, combatants);\n\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"combatSummary\",\n    requestId,\n    combatants,\n  });\n\n  return combatants;\n}\n\nexport async function rollAttack(request) {\n  const { requestId, actorId, targetId } = request;\n  const attacker = game.actors.get(actorId);\n  const target = game.actors.get(targetId);\n\n  if (!attacker) {\n    console.warn(`Attacker with ID ${actorId} not found`);\n    return `Attacker with ID ${actorId} not found`;\n  }\n  if (!target) {\n    console.warn(`Target with ID ${targetId} not found`);\n    return `Target with ID ${targetId} not found`;\n  }\n\n  try {\n    const rollData = attacker.getRollData();\n    const attackFormula = `1d20 + @abilities.str.mod`;\n    const attackRoll = await new Roll(attackFormula, rollData).evaluate();\n    const targetAC = target.system.attributes.ac.value;\n    const isCritHit = attackRoll.total === 20;\n    const isCritMiss = attackRoll.total === 1;\n\n    let messageContent = `${attacker.name} rolls an attack of ${attackRoll.total} against ${target.name} (AC: ${targetAC}).`;\n\n    const baseDamageFormula = `1d8 + @abilities.str.mod`;\n    const damageFormula = isCritHit\n      ? `2 * (${baseDamageFormula})`\n      : baseDamageFormula;\n    const damageRoll = await new Roll(damageFormula, rollData).evaluate();\n    let finalDamage = Math.max(damageRoll.total, 1);\n\n    if (isCritHit) {\n      messageContent += ` Critical hit! ${attacker.name} deals ${finalDamage} damage to ${target.name}.`;\n\n      if (damageRoll) {\n        await damageRoll.toMessage({\n          speaker: ChatMessage.getSpeaker({ actor: attacker }),\n          flavor: `${attacker.name}'s critical hit damage!`,\n        });\n      }\n\n      // Apply damage to the target\n      const targetCurrentHP = target.system.attributes.hp.value;\n      const targetNewHP = Math.max(0, targetCurrentHP - finalDamage);\n      await target.update({ \"system.attributes.hp.value\": targetNewHP });\n\n      game.socket.emit(`module.discord-bot-integration`, {\n        action: \"attackResult\",\n        requestId,\n        actorName: attacker.name,\n        targetName: target.name,\n        attackTotal: attackRoll.total,\n        damageTotal: finalDamage,\n        isHit: true,\n        isCritHit: true,\n      });\n    } else if (isCritMiss) {\n      const fumbleEvent = getFumbleEvent();\n      messageContent += ` Critical miss! ${attacker.name} fumbles: ${fumbleEvent.message}`;\n\n      if (fumbleEvent.attackerDamage) {\n        const currentHP = attacker.system.attributes.hp.value;\n        const newHP = Math.max(0, currentHP - fumbleEvent.attackerDamage);\n        await attacker.update({ \"system.attributes.hp.value\": newHP });\n        messageContent += ` ${attacker.name} takes ${fumbleEvent.attackerDamage} damage due to the fumble.`;\n      }\n\n      game.socket.emit(`module.discord-bot-integration`, {\n        action: \"attackResult\",\n        requestId,\n        actorName: attacker.name,\n        targetName: target.name,\n        attackTotal: attackRoll.total,\n        isHit: false,\n        isCritMiss: true,\n        fumbleEvent: fumbleEvent.message,\n        attackerDamage: fumbleEvent.attackerDamage || 0,\n      });\n    } else {\n      const isHit = attackRoll.total >= targetAC;\n      if (isHit) {\n        messageContent += ` It's a hit! ${attacker.name} deals ${finalDamage} damage to ${target.name}.`;\n\n        if (damageRoll) {\n          await damageRoll.toMessage({\n            speaker: ChatMessage.getSpeaker({ actor: attacker }),\n            flavor: `${attacker.name} deals damage!`,\n          });\n        }\n\n        // Apply damage to the target\n        const targetCurrentHP = target.system.attributes.hp.value;\n        const targetNewHP = Math.max(0, targetCurrentHP - finalDamage);\n        await target.update({ \"system.attributes.hp.value\": targetNewHP });\n\n        game.socket.emit(`module.discord-bot-integration`, {\n          action: \"attackResult\",\n          requestId,\n          actorName: attacker.name,\n          targetName: target.name,\n          attackTotal: attackRoll.total,\n          damageTotal: finalDamage,\n          isHit,\n        });\n      } else {\n        messageContent += ` The attack misses!`;\n        game.socket.emit(`module.discord-bot-integration`, {\n          action: \"attackResult\",\n          requestId,\n          actorName: attacker.name,\n          targetName: target.name,\n          attackTotal: attackRoll.total,\n          isHit: false,\n        });\n      }\n    }\n\n    if (attackRoll) {\n      await attackRoll.toMessage({\n        speaker: ChatMessage.getSpeaker({ actor: attacker }),\n        flavor: messageContent,\n      });\n    }\n\n    return messageContent;\n  } catch (error) {\n    console.error(`Error during enhanced attack roll:`, error);\n    return `Error during attack roll: ${error.message}`;\n  }\n}\n\n// Enhanced fumble event structure\nfunction getFumbleEvent() {\n  const fumbleEvents = [\n    { message: \"You slip and fall prone.\", attackerDamage: 0 },\n    { message: \"You drop your weapon!\", attackerDamage: 0 },\n    {\n      message: \"You injure yourself slightly, taking 1 point of damage.\",\n      attackerDamage: 1,\n    },\n    { message: \"You swing wildly, hitting an ally nearby.\", attackerDamage: 0 },\n    {\n      message:\n        \"You are disoriented, and your next attack roll is at disadvantage.\",\n      attackerDamage: 0,\n    },\n  ];\n  return fumbleEvents[Math.floor(Math.random() * fumbleEvents.length)];\n}\n\nexport async function rollSavingThrow(request) {\n  const { requestId, saveType, actorId, dc } = request;\n  const actor = game.actors.get(actorId);\n  if (!actor) {\n    console.warn(`Actor with ID ${actorId} not found`);\n    return `${MODULE_NAME} | Actor with ID ${actorId} not found`;\n  }\n\n  const rollData = actor.getRollData();\n  let saveBonus;\n  let formula;\n  let saveName;\n  \n  if (rollData.abilities[saveType]) {\n    saveBonus = rollData.abilities[saveType].save;\n    formula = `1d20 + ${saveBonus}`;\n    saveName = saveType.toUpperCase();\n  } else if (rollData.skills[saveType]) {\n    saveBonus = rollData.skills[saveType].total;\n    formula = `1d20 + ${saveBonus}`;\n    saveName = rollData.skills[saveType].ability.toUpperCase() + \" (\" + saveType + \")\";\n  } else {\n    console.warn(`Unknown save type: ${saveType}`);\n    return `${MODULE_NAME} | Unknown save type: ${saveType}`;\n  }\n\n  const roll = await new Roll(formula, rollData).evaluate({ async: true });\n  const isCritSuccess = roll.total === 20;\n  const isCritFailure = roll.total === 1;\n\n  let messageContent = `${actor.name} makes a ${saveName} saving throw. Result: ${roll.total}`;\n\n  // Determine success or failure if a DC is provided\n  let success = null;\n  if (dc !== undefined) {\n    success = roll.total >= dc;\n    messageContent += success\n      ? ` - Success! (DC: ${dc})`\n      : ` - Failure. (DC: ${dc})`;\n  }\n\n  // Add critical success/failure messaging\n  if (isCritSuccess) {\n    messageContent += \" **Critical Success!**\";\n  } else if (isCritFailure) {\n    messageContent += \" **Critical Failure!**\";\n  }\n\n  // Emit the result to Discord or frontend via socket with more detail\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"savingThrowResult\",\n    requestId,\n    actorName: actor.name,\n    saveType: saveName,\n    result: roll.total,\n    isCritSuccess,\n    isCritFailure,\n    dc,\n    success,\n  });\n\n  // Post the message to chat\n  await roll.toMessage({\n    speaker: ChatMessage.getSpeaker({ actor }),\n    flavor: messageContent,\n  });\n\n  return messageContent;\n}\n\nexport async function applyDamageOrHealing(request) {\n  const { requestId, actorId, amount } = request;\n  const actor = game.actors.get(actorId);\n  if (!actor) {\n    console.warn(`${MODULE_NAME} | Actor with ID ${actorId} not found`);\n    return `${MODULE_NAME} | Actor with ID ${actorId} not found`;\n  }\n\n  const currentHP = actor.system.attributes.hp.value;\n  const maxHP = actor.system.attributes.hp.max;\n  let newHP;\n\n  let actionType;\n  if (amount < 0) {\n    actionType = \"damage\";\n    newHP = Math.max(0, currentHP + amount); \n  } else {\n    actionType = \"healing\";\n    newHP = Math.min(maxHP, currentHP + amount); \n  }\n\n  // Update actor's HP\n  await actor.update({ \"system.attributes.hp.value\": newHP });\n\n  // Log and emit the result\n  const changeType = actionType === \"damage\" ? \"Damage\" : \"Healing\";\n  console.log(`${MODULE_NAME} | ${changeType} applied: ${Math.abs(amount)}. New HP: ${newHP}`);\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"hpUpdated\",\n    requestId,\n    actorName: actor.name,\n    currentHP: newHP,\n    maxHP,\n    changeType: actionType,\n    changeAmount: Math.abs(amount),\n  });\n\n  // Display a message in Foundry VTT chat\n  const chatMessage = `${actor.name} ${actionType === \"damage\" ? \"takes\" : \"receives\"} ${Math.abs(amount)} ${actionType} and now has ${newHP}/${maxHP} HP.`;\n  await ChatMessage.create({\n    speaker: ChatMessage.getSpeaker({ actor }),\n    content: chatMessage,\n  });\n\n  return chatMessage;\n}\n\nexport async function rollOnTable(request) {\n  const { requestId, tableId } = request;\n  debugLog(`${MODULE_NAME} | rollOnTable:`, tableId);\n  const table = game.tables.get(tableId);\n  if (!table) {\n    debugLog(`${MODULE_NAME} | Table with ID ${tableId} not found`);\n    console.warn(`Table with ID ${tableId} not found`);\n    return;\n  }\n\n  const rollResult = await table.draw();\n  const resultText = rollResult.results.map((r) => r.getChatText()).join(\", \");\n\n  debugLog(`${MODULE_NAME} | rollOnTable:`, tableId, resultText);\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"tableRollResult\",\n    requestId,\n    tableName: table.name,\n    result: resultText,\n  });\n\n  return resultText;\n}\n\nexport async function generateRandomEncounter(request) {\n  const { requestId, encounterType } = request;\n  const encounters = {\n    forest: [\"Wolf\", \"Goblin Scout\", \"Bandit\"],\n    dungeon: [\"Skeleton\", \"Zombie\", \"Giant Spider\"],\n    town: [\"Thief\", \"Guard Patrol\", \"Pickpocket\"],\n  };\n\n  const encounterList = encounters[encounterType] || [];\n  const randomEncounter =\n    encounterList.length > 0\n      ? encounterList[Math.floor(Math.random() * encounterList.length)]\n      : \"Nothing found\";\n\n  debugLog(\n    `${MODULE_NAME} | generateRandomEncounter:`,\n    encounterType,\n    randomEncounter\n  );\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"randomEncounterResult\",\n    requestId,\n    encounterType,\n    encounter: randomEncounter,\n  });\n  return randomEncounter;\n}\n\nexport async function relayChatToDiscord(message, requestId) {\n  debugLog(`${MODULE_NAME} | Relaying message to Discord2: ${message}`);\n\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"chatRelayToDiscord\",\n    requestId,\n    message,\n  });\n}\n\nexport async function relayRPCommand(request) {\n  const { requestId, characterId, message } = request;\n  const character = game.actors.get(characterId);\n  if (!character) {\n    debugLog(`${MODULE_NAME} | Character with ID ${characterId} not found`);\n    console.warn(`Character with ID ${characterId} not found`);\n    return;\n  }\n\n  const formattedMessage = `<strong>${character.name}</strong>: ${message}`;\n  ChatMessage.create({\n    content: formattedMessage,\n    speaker: { actor: character },\n  });\n\n  debugLog(`${MODULE_NAME} | Relaying message to Discord3: ${message}`);\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"rpCommandRelay\",\n    requestId,\n    characterName: character.name,\n    message,\n  });\n}\n\nexport async function castSpell(request) {\n  const { requestId, casterId, spellId, targetId } = request;\n  const caster = game.actors.get(casterId);\n  debugLog(`${MODULE_NAME} | castSpell:`, casterId, spellId, targetId);\n\n  if (!caster) {\n    debugLog(`${MODULE_NAME} | Caster with ID ${casterId} not found`);\n    console.warn(`Caster with ID ${casterId} not found`);\n    return;\n  }\n\n  const spell = caster.items.get(spellId);\n  if (!spell || spell.type !== \"spell\") {\n    debugLog(\n      `${MODULE_NAME} | Spell with ID ${spellId} not found or is not a spell`\n    );\n    console.warn(`Spell with ID ${spellId} not found or is not a spell`);\n    return;\n  }\n\n  const target = game.actors.get(targetId);\n  const spellDescription =\n    spell.system.description.value || \"No description available\";\n\n  ChatMessage.create({\n    content: `<strong>${caster.name}</strong> casts <strong>${spell.name}</strong> on <strong>${\n      target ? target.name : \"Unknown Target\"\n    }</strong><br>${spellDescription}`,\n    speaker: { actor: caster },\n  });\n\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"spellCastNotification\",\n    requestId,\n    casterName: caster.name,\n    spellName: spell.name,\n    targetName: target ? target.name : \"Unknown Target\",\n    description: spellDescription,\n  });\n\n  // Apply spell effects\n  await applySpellEffects(spell, caster, target);\n  return `${caster.name} casts ${spell.name} on ${target ? target.name : \"Unknown Target\"}`;\n}\n\nexport async function applySpellEffects(spell, caster, target) {\n  if (!target) return;\n\n  const spellEffects = spell.system.damage?.parts || [];\n  const healingEffect = spellEffects.find((part) => part[1] === \"healing\");\n  const damageEffect = spellEffects.find((part) => part[1] === \"damage\");\n\n  if (healingEffect) {\n    const healingAmount = calculateSpellEffect(healingEffect, caster);\n    await target.update({\n      \"system.attributes.hp.value\": Math.min(\n        target.system.attributes.hp.max,\n        target.system.attributes.hp.value + healingAmount\n      ),\n    });\n    debugLog(`${MODULE_NAME} | Healing applied: ${healingAmount}. New HP: ${target.system.attributes.hp.value}`);\n\n    game.socket.emit(`module.discord-bot-integration`, {\n      action: \"spellEffectApplied\",\n      casterName: caster.name,\n      effect: `heals ${target.name} for ${healingAmount} HP`,\n    });\n  }\n\n  if (damageEffect) {\n    const damageAmount = calculateSpellEffect(damageEffect, caster);\n    const savingThrow = spell.system.save?.dc ? await rollSavingThrow(target, spell.system.save.dc) : null;\n    const isSaveSuccessful = savingThrow && savingThrow.total >= spell.system.save.dc;\n\n    const finalDamage = isSaveSuccessful ? Math.floor(damageAmount / 2) : damageAmount;\n    await target.update({\n      \"system.attributes.hp.value\": Math.max(0, target.system.attributes.hp.value - finalDamage),\n    });\n\n    debugLog(`${MODULE_NAME} | Damage applied: ${finalDamage}. New HP: ${target.system.attributes.hp.value}`);\n    game.socket.emit(`module.discord-bot-integration`, {\n      action: \"spellEffectApplied\",\n      casterName: caster.name,\n      effect: `deals ${finalDamage} damage to ${target.name}${isSaveSuccessful ? \" (half due to successful save)\" : \"\"}`,\n    });\n\n    ChatMessage.create({\n      content: `${target.name} ${isSaveSuccessful ? \"saves partially\" : \"fails to save\"} against ${\n        spell.name\n      } and takes ${finalDamage} damage.`,\n    });\n  }\n\n  // Apply conditions if present\n  if (spell.system.duration && spell.system.duration.units === \"condition\") {\n    const condition = spell.system.duration.value;\n    target.createEmbeddedDocuments(\"ActiveEffect\", [\n      {\n        label: condition,\n        icon: spell.img,\n        origin: caster.uuid,\n        changes: [{ key: \"flags.conditions\", mode: 0, value: condition }],\n      },\n    ]);\n\n    debugLog(`${MODULE_NAME} | Condition applied: ${condition}`);\n    game.socket.emit(`module.discord-bot-integration`, {\n      action: \"conditionApplied\",\n      targetName: target.name,\n      condition,\n    });\n\n    ChatMessage.create({\n      content: `${target.name} is now affected by ${condition} from ${spell.name}.`,\n    });\n  }\n}\n\nfunction calculateSpellEffect(effect, caster) {\n  const [formula, type] = effect;\n  const roll = new Roll(formula, caster.getRollData()).evaluate({ async: false });\n  debugLog(`${MODULE_NAME} | Spell effect formula: ${formula}, type: ${type}, roll: ${roll.total}`);\n  return roll.total;\n}\n\nexport async function useAbility(request) {\n  const { casterId, abilityId, targetId, requestId } = request;\n  debugLog(`${MODULE_NAME} | useAbility:`, request);\n  const caster = game.actors.get(casterId);\n  \n  if (!caster) {\n    debugLog(`${MODULE_NAME} | Caster with ID ${casterId} not found`);\n    console.warn(`Caster with ID ${casterId} not found`);\n    return;\n  }\n\n  const ability = caster.items.get(abilityId);\n  if (!ability || ability.type !== \"feat\") {\n    debugLog(\n      `${MODULE_NAME} | Ability with ID ${abilityId} not found or is not an ability`\n    );\n    console.warn(`Ability with ID ${abilityId} not found or is not an ability`);\n    return;\n  }\n\n  const target = game.actors.get(targetId) || caster; // Use caster as fallback target\n  const abilityDescription = ability.system.description.value || \"No description available\";\n\n  const hasLimitedUses = ability.system.uses?.value > 0;\n  if (hasLimitedUses && ability.system.uses.value <= 0) {\n    const msg = `${caster.name} cannot use ${ability.name}, no charges left!`;\n    ChatMessage.create({ content: msg });\n    return msg;\n  }\n\n  ChatMessage.create({\n    content: `<strong>${caster.name}</strong> uses <strong>${\n      ability.name\n    }</strong> on <strong>${\n      target ? target.name : \"Unknown Target\"\n    }</strong><br>${abilityDescription}`,\n    speaker: { actor: caster },\n  });\n\n\n  await applyAbilityEffects(ability, caster, target);\n\n  if (hasLimitedUses) {\n    await ability.update({ \"system.uses.value\": ability.system.uses.value - 1 });\n  }\n\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"abilityUseNotification\",\n    requestId,\n    casterName: caster.name,\n    abilityName: ability.name,\n    targetName: target ? target.name : \"Unknown Target\",\n    description: abilityDescription,\n  });\n\n  debugLog(`${MODULE_NAME} | Ability used: ${ability.name} on ${target ? target.name : \"Unknown Target\"}`);\n  return `Ability used: ${ability.name} on ${target ? target.name : \"Unknown Target\"}`;\n}\n\nexport async function applyAbilityEffects(ability, caster, target) {\n  debugLog(`${MODULE_NAME} | applyAbilityEffects:`, ability, caster, target);\n  const healingEffect = ability.system.damage?.parts.find(\n    (part) => part[1] === \"healing\"\n  );\n  if (healingEffect) {\n    const healingAmount = calculateEffectValue(healingEffect, caster);\n    await target.update({\n      \"system.attributes.hp.value\": Math.min(\n        target.system.attributes.hp.max,\n        target.system.attributes.hp.value + healingAmount\n      ),\n    });\n    debugLog(`${MODULE_NAME} | Healing applied: ${healingAmount} HP to ${target.name}`);\n    ChatMessage.create({\n      content: `${target.name} is healed for ${healingAmount} HP by ${caster.name}'s ${ability.name}.`,\n    });\n  }\n\n  const damageEffect = ability.system.damage?.parts.find(\n    (part) => part[1] === \"damage\"\n  );\n  if (damageEffect) {\n    const damageAmount = calculateEffectValue(damageEffect, caster);\n    await target.update({\n      \"system.attributes.hp.value\": Math.max(\n        0,\n        target.system.attributes.hp.value - damageAmount\n      ),\n    });\n    debugLog(`${MODULE_NAME} | Damage applied: ${damageAmount} damage to ${target.name}`);\n    ChatMessage.create({\n      content: `${target.name} takes ${damageAmount} damage from ${caster.name}'s ${ability.name}.`,\n    });\n  }\n\n  const conditionEffect = ability.system.duration?.units === \"condition\";\n  if (conditionEffect) {\n    const condition = ability.system.duration.value;\n    await target.createEmbeddedDocuments(\"ActiveEffect\", [\n      {\n        label: condition,\n        icon: ability.img,\n        origin: caster.uuid,\n        changes: [{ key: \"flags.conditions\", mode: 0, value: condition }],\n      },\n    ]);\n    debugLog(`${MODULE_NAME} | Condition applied: ${condition} to ${target.name}`);\n    ChatMessage.create({\n      content: `${target.name} is affected by ${condition} from ${caster.name}'s ${ability.name}.`,\n    });\n  }\n}\n\nfunction calculateEffectValue(effect, caster) {\n  const [formula, type] = effect;\n  const roll = new Roll(formula, caster.getRollData()).evaluate({ async: false });\n  debugLog(`${MODULE_NAME} | Effect formula: ${formula}, type: ${type}, roll: ${roll.total}`);\n  return roll.total;\n}\n\nexport async function viewQuestLog(request) {\n  debugLog(`${MODULE_NAME} | viewQuestLog:`, request);\n  const requestId = request.id;\n  \n  // Retrieve all quests flagged as part of the quest log\n  const quests = game.journal.contents.filter((entry) => entry.flags.questLog === true);\n  \n  if (!quests.length) {\n    debugLog(`${MODULE_NAME} | viewQuestLog: No quests found.`);\n    game.socket.emit(`module.discord-bot-integration`, {\n      action: \"questLogResponse\",\n      requestId,\n      questLog: \"No quests available in the quest log.\",\n    });\n    return \"No quests available in the quest log.\";\n  }\n\n  const questData = quests.map((quest) => ({\n    title: quest.name,\n    content: quest.data.content,\n    status: quest.flags.status || \"In Progress\",\n    objectives: quest.flags.objectives || [],   // Array of quest objectives if available\n    rewards: quest.flags.rewards || \"Unknown\",  // Rewards if specified in flags\n    difficulty: quest.flags.difficulty || \"Normal\", // Difficulty if specified\n    questGiver: quest.flags.questGiver || \"Unknown\" // NPC quest-giver\n  }));\n\n  // Categorize quests by their status\n  const categorizedQuests = {\n    InProgress: questData.filter((q) => q.status === \"In Progress\"),\n    Completed: questData.filter((q) => q.status === \"Completed\"),\n    Failed: questData.filter((q) => q.status === \"Failed\"),\n  };\n\n  const formatQuestEntry = (quest) => {\n    const objectives = quest.objectives.length\n      ? quest.objectives.map((obj, idx) => `  ${idx + 1}. ${obj.description} (${obj.completed ? \"✓\" : \"✗\"})`).join(\"\\n\")\n      : \"No objectives listed.\";\n\n    return `**${quest.title}**\\nStatus: ${quest.status}\\nDifficulty: ${quest.difficulty}\\nQuest Giver: ${quest.questGiver}\\nRewards: ${quest.rewards}\\nObjectives:\\n${objectives}\\n\\n${quest.content}`;\n  };\n\n  // Construct the summary for each category and add section headers\n  const questSummary = [\n    `### **Quest Log** ###\\n`,\n    `--- In Progress ---\\n${categorizedQuests.InProgress.map(formatQuestEntry).join(\"\\n\\n---\\n\")}`,\n    `--- Completed ---\\n${categorizedQuests.Completed.map(formatQuestEntry).join(\"\\n\\n---\\n\")}`,\n    `--- Failed ---\\n${categorizedQuests.Failed.map(formatQuestEntry).join(\"\\n\\n---\\n\")}`,\n  ].join(\"\\n\\n\");\n\n  debugLog(`${MODULE_NAME} | viewQuestLogQuestSummary:`, questSummary);\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"questLogResponse\",\n    requestId,\n    questLog: questSummary,\n  });\n\n  return questData;\n}\n\nexport async function updateQuestStatus(request) {\n  debugLog(`${MODULE_NAME} | updateQuestStatus:`, request);\n  const { requestId, questId, newStatus } = request;\n  const quest = game.journal.get(questId);\n\n  if (!quest || !quest.flags.questLog) {\n    console.warn(`Quest with ID ${questId} not found or is not a quest log entry`);\n    return `Quest with ID ${questId} not found or is not part of the quest log.`;\n  }\n\n  // Update the quest status\n  const updatedFlags = {\n    ...quest.flags,\n    status: newStatus,\n  };\n  await quest.update({ flags: updatedFlags });\n\n  debugLog(`${MODULE_NAME} | Quest status updated:`, quest.name, newStatus);\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"questStatusUpdated\",\n    requestId,\n    questName: quest.name,\n    newStatus,\n  });\n\n  return `Quest \"${quest.name}\" status updated to \"${newStatus}\".`;\n}\n\nexport async function updateQuestObjective(request) {\n  const { requestId, questId, objectiveIndex } = request;\n  const quest = game.journal.get(questId);\n\n  if (!quest || !quest.flags.questLog) {\n    console.warn(`Quest with ID ${questId} not found or is not a quest log entry`);\n    return `Quest with ID ${questId} not found or is not part of the quest log.`;\n  }\n\n  const objectives = quest.flags.objectives || [];\n  if (objectiveIndex >= objectives.length || objectiveIndex < 0) {\n    console.warn(`Objective index ${objectiveIndex} is out of bounds`);\n    return `Objective index ${objectiveIndex} is out of bounds for quest \"${quest.name}\".`;\n  }\n\n  objectives[objectiveIndex].completed = true;\n  await quest.update({ \"flags.objectives\": objectives });\n\n  debugLog(`${MODULE_NAME} | Quest objective updated:`, quest.name, objectives[objectiveIndex].description);\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"questObjectiveUpdated\",\n    requestId,\n    questName: quest.name,\n    objective: objectives[objectiveIndex].description,\n  });\n\n  return `Objective \"${objectives[objectiveIndex].description}\" marked as completed in quest \"${quest.name}\".`;\n}\n\nexport async function addNoteToLog(request) {\n  debugLog(`${MODULE_NAME} | addNoteToLog:`, request);\n  const { questId, note, requestId } = request;\n  const quest = game.journal.get(questId);\n  if (!quest) {\n    debugLog(`${MODULE_NAME} | Quest with ID ${questId} not found`);\n    console.warn(`Quest with ID ${questId} not found`);\n    return `Quest with ID ${questId} not found.`;\n  }\n\n  const updatedContent = quest.data.content + `\\n\\n**Note:** ${note}`;\n\n  await quest.update({ content: updatedContent });\n\n  debugLog(`${MODULE_NAME} | addNoteToLog:`, quest, updatedContent);\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"noteAddedConfirmation\",\n    requestId,\n    questTitle: quest.name,\n    note,\n  });\n\n  return `Note \"${note}\" added to quest \"${quest.name}\".`;\n}\n\nexport async function queryNpcStats(request) {\n  debugLog(`${MODULE_NAME} | queryNpcStats:`, request);\n  const { npcId, requestId } = request;\n  const npc = game.actors.get(npcId);\n  if (!npc) {\n    debugLog(`${MODULE_NAME} | NPC with ID ${npcId} not found`);\n    console.warn(`NPC with ID ${npcId} not found`);\n    return;\n  }\n\n  const npcStats = {\n    name: npc.name,\n    hp: npc.system.attributes.hp.value,\n    ac: npc.system.attributes.ac.value,\n    abilities: {\n      str: npc.system.abilities.str.value,\n      dex: npc.system.abilities.dex.value,\n      con: npc.system.abilities.con.value,\n      int: npc.system.abilities.int.value,\n      wis: npc.system.abilities.wis.value,\n      cha: npc.system.abilities.cha.value,\n    },\n  };\n\n  debugLog(`${MODULE_NAME} | queryNpcStats:`, npcStats);\n\n  const npcSummary = `\n  **${npcStats.name}**\\n\n  HP: ${npcStats.hp}, AC: ${npcStats.ac}\\n\n  STR: ${npcStats.abilities.str}, DEX: ${npcStats.abilities.dex}, CON: ${npcStats.abilities.con}\\n\n  INT: ${npcStats.abilities.int}, WIS: ${npcStats.abilities.wis}, CHA: ${npcStats.abilities.cha}\n  `;\n\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"npcStatsResponse\",\n    requestId,\n    npcSummary,\n  });\n\n  return npcStats\n}\n\nexport async function generateRandomNpc(request) {\n  const randomNpc = await createRandomNpc();\n  debugLog(`${MODULE_NAME} | generateRandomNpc:`, randomNpc);\n\n  const requestId = request.id;\n  const randomNpcSummary = `\n  **Name**: ${randomNpc.name}\\n\n  HP: ${randomNpc.hp}, AC: ${randomNpc.ac}\\n\n  Abilities: STR ${randomNpc.str}, DEX ${randomNpc.dex}, CON ${randomNpc.con}, INT ${randomNpc.int}, WIS ${randomNpc.wis}, CHA ${randomNpc.cha}\n  `;\n\n  debugLog(`${MODULE_NAME} | generateRandomNpcSummary:`, randomNpcSummary);\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"randomNpcResponse\",\n    requestId,\n    randomNpcSummary,\n  });\n\n  return randomNpc\n}\n\nexport async function createRandomNpc() {\n  const names = [\"Orc Warrior\", \"Goblin Shaman\", \"Bandit Leader\", \"Dire Wolf\"];\n  const name = names[Math.floor(Math.random() * names.length)];\n  const hp = Math.floor(Math.random() * 30) + 20;\n  const ac = Math.floor(Math.random() * 6) + 10;\n  const abilities = {\n    str: Math.floor(Math.random() * 8) + 10,\n    dex: Math.floor(Math.random() * 8) + 10,\n    con: Math.floor(Math.random() * 8) + 10,\n    int: Math.floor(Math.random() * 8) + 8,\n    wis: Math.floor(Math.random() * 8) + 8,\n    cha: Math.floor(Math.random() * 8) + 8,\n  };\n  debugLog(`${MODULE_NAME} | createRandomNpc:`, name, hp, ac, abilities);\n\n  return {\n    name,\n    hp,\n    ac,\n    ...abilities,\n  };\n}\n\nexport async function handleLongRest(request) {\n  const { characterId, requestId } = request;\n  const character = game.actors.get(characterId);\n\n  if (!character) {\n    debugLog(`${MODULE_NAME} | Character with ID ${characterId} not found`);\n    console.warn(`Character with ID ${characterId} not found`);\n    return;\n  }\n\n  // Perform a long rest directly without showing the dialog\n  await character.longRest({ dialog: false, chat: false });\n\n  const restSummary = `\n  **${character.name} has completed a Long Rest**\\n\n  HP fully restored to ${character.system.attributes.hp.value}/${character.system.attributes.hp.max}\\n\n  All spell slots and abilities are refreshed.\n  `;\n\n  debugLog(`${MODULE_NAME} | handleLongRest:`, restSummary);\n\n  // Emit the rest summary to Discord or other integrated services\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"restNotification\",\n    requestId,\n    restSummary,\n  });\n\n  return restSummary;\n}\n\nexport async function handleShortRest(request) {\n  const { characterId, requestId } = request;\n  debugLog(`${MODULE_NAME} | handleShortRest:`, characterId, requestId);\n  const character = game.actors.get(characterId);\n  if (!character) {\n    debugLog(`${MODULE_NAME} | Character with ID ${characterId} not found`);\n    console.warn(`Character with ID ${characterId} not found`);\n    return;\n  }\n\n  await character.shortRest({ dialog: false, chat: false });\n\n  const restSummary = `\n  **${character.name} has completed a Short Rest**\\n\n  HP partially restored based on hit dice. Check abilities and spells for partial recovery.\n  `;\n\n  debugLog(`${MODULE_NAME} | handleShortRest:`, restSummary);\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"restNotification\",\n    requestId,\n    restSummary,\n  });\n\n  return restSummary\n}\n\nexport async function handleSessionStart(request) {\n  const { sessionData, requestId } = request;\n  const { sessionTitle, participants } = sessionData;\n  const startTime = new Date().toLocaleString();\n\n  debugLog(\n    `${MODULE_NAME} | handleSessionStart:`,\n    sessionTitle,\n    startTime,\n    participants\n  );\n  const startMessage = `\n  **Session Started: ${sessionTitle}**\n  Start Time: ${startTime}\n  Participants: ${participants.join(\", \")}\n  Good luck and enjoy the adventure!\n    `;\n\n  debugLog(`${MODULE_NAME} | startMessage:`, startMessage);\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"sessionNotification\",\n    requestId,\n    message: startMessage,\n    type: \"startSession\",\n  });\n  return startMessage\n}\n\nexport async function handleSessionEnd(request) {\n  debugLog(`${MODULE_NAME} | handleSessionEnd:`, request);\n  const { sessionData, requestId } = request;\n  const { sessionTitle } = sessionData;\n  const endTime = new Date().toLocaleString();\n\n  debugLog(`${MODULE_NAME} | handleSessionEnd:`, sessionTitle, endTime);\n  const endMessage = `\n  **Session Ended: ${sessionTitle}**\n  End Time: ${endTime}\n  Thank you for playing. See you next time!\n    `;\n\n  debugLog(`${MODULE_NAME} | endMessage:`, endMessage);\n\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"sessionNotification\",\n    requestId,\n    message: endMessage,\n    type: \"endSession\",\n  });\n  return endMessage\n}\n\nexport async function handleLogSessionNotes(request) {\n  const { logData, requestId } = request;\n  const { sessionTitle, notes } = logData;\n\n  debugLog(`${MODULE_NAME} | handleLogSessionNotes:`, sessionTitle, notes);\n  const notesMessage = `\n  **Session Notes for ${sessionTitle}:**\n  ${notes}\n    `;\n\n  debugLog(`${MODULE_NAME} | notesMessage:`, notesMessage);\n  game.socket.emit(`module.discord-bot-integration`, {\n    action: \"sessionNotification\",\n    requestId,\n    message: notesMessage,\n    type: \"sessionLog\",\n  });\n  return notesMessage\n}\n","import { MODULE_NAME } from \"./index.js\";\nimport { debugLog } from \"./utils/debuggingUtils\";\ndebugLog(`[Discord Bot Integration] Hooks module loading...`);\nexport function registerHooks() {\n  \n    Hooks.on(\"updateActor\", (actor, data, options, userId) => {\n      debugLog(`${MODULE_NAME} | Actor updated: ${actor.name}`);\n      game.socket.emit(`module.${MODULE_NAME}`, {\n        action: \"actorUpdated\",\n        actorId: actor.id,\n        actorData: actor.toJSON(),\n      });\n    });\n  \n    Hooks.on(\"createItem\", (item, options, userId) => {\n      debugLog(`${MODULE_NAME} | Item created: ${item.name}`);\n      const actor = item.parent;\n      if (actor) {\n        debugLog(`${MODULE_NAME} | Item added to ${actor.name}'s inventory: ${item.name}`);\n        game.socket.emit(`module.${MODULE_NAME}`, {\n          action: \"itemAdded\",\n          actorId: actor.id,\n          itemData: item.toJSON(),\n        });\n      }\n    });\n  \n    Hooks.on(\"deleteItem\", (item, options, userId) => {\n      debugLog(`${MODULE_NAME} | Item deleted: ${item.name}`);\n      const actor = item.parent;\n      if (actor) {\n        debugLog(`${MODULE_NAME} | Item removed from ${actor.name}'s inventory: ${item.name}`);\n        game.socket.emit(`module.${MODULE_NAME}`, {\n          action: \"itemRemoved\",\n          actorId: actor.id,\n          itemId: item.id,\n        });\n      }\n    });\n  \n    Hooks.on(\"updateCombat\", (combat, data, options, userId) => {\n      const combatantsData = combat.combatants.map((combatant) => ({\n        id: combatant.id,\n        name: combatant.name,\n        initiative: combatant.initiative,\n        hp: combatant.actor?.system.attributes.hp.value, \n        statusEffects: combatant.actor?.effects.map(effect => effect.label), \n      }));\n      debugLog(`${MODULE_NAME} | Combat updated: Combat ID ${combat.id}`);\n      const currentCombatant = combat.combatant.actor.name;\n      game.socket.emit(`module.${MODULE_NAME}`, {\n        action: \"combatUpdated\",\n        combatId: combat.id,\n        round: combat.round,\n        turn: combat.turn,\n        combatants: combatantsData,\n        currentCombatant\n      });\n    });\n    \n    Hooks.on(\"combatTurn\", (combat) => {\n      const currentCombatant = combat.combatant;\n      if (currentCombatant) {\n        debugLog(`${MODULE_NAME} | Turn notification for: ${currentCombatant.actor.name}`);\n        \n        game.socket.emit(`module.${MODULE_NAME}`, {\n          action: \"turnNotification\",\n          combatantName: currentCombatant.actor.name,\n          combatantId: currentCombatant.actor.id,\n          initiative: currentCombatant.initiative,\n          round: combat.round,\n          turn: combat.turn,\n        });\n      }\n    });\n  \n    Hooks.on(\"createChatMessage\", (chatMessage, options, userId) => {\n      const message = chatMessage.system.content; \n      debugLog(`${MODULE_NAME} | Relaying message to Discord1: ${message}`);\n      game.socket.emit(`module.${MODULE_NAME}`, {\n        action: \"chatRelayToDiscord\",\n        message,\n      });\n    });\n  \n    Hooks.on(\"useItem\", (item, options) => {\n      debugLog(`${MODULE_NAME} | Item used: ${item.name}`);\n      const actor = item.actor;\n      if (actor && (item.type === \"spell\" || item.type === \"feat\")) {\n        debugLog(`${MODULE_NAME} | Spell or ability used: ${item.name}`);\n        game.socket.emit(`module.${MODULE_NAME}`, {\n          action: item.type === \"spell\" ? \"spellUsed\" : \"abilityUsed\",\n          casterName: actor.name,\n          itemName: item.name,\n          description: item.data.data.description.value,\n        });\n      }\n    });\n  \n    Hooks.on(\"restComplete\", (actor, restData) => {\n      debugLog(`${MODULE_NAME} | Rest completed: ${actor.name}`);\n      const restType = restData.longRest ? \"longRest\" : \"shortRest\";\n      debugLog(`${MODULE_NAME} | ${actor.name} completed a ${restType}`);\n      game.socket.emit(`module.${MODULE_NAME}`, {\n        action: restType,\n        actorId: actor.id,\n        actorName: actor.name,\n      });\n    });\n\n  debugLog(`${MODULE_NAME} hooks registered`);\n\n  }","import { debugLog } from \"./utils/debuggingUtils\";\nimport { MODULE_NAME } from \"./index.js\";\nimport * as socket from \"./api.js\";\n\nexport class SocketHandler {\n  constructor() {\n    this.functions = new Map();\n    this.requests = new Map();\n    this.name = `module.${MODULE_NAME}`;\n    console.log(`${MODULE_NAME} this.name:`, this.name);\n\n    game.socket.on(this.name, this._received.bind(this));\n\n    this.register(\"updateCharacterHP\", socket.updateCharacterHP);\n    this.register(\"rollInitiative\", socket.rollInitiative);\n    this.register(\"castSpell\", socket.castSpell);\n    this.register(\"getCharacterStats\", socket.getCharacterStats);\n    this.register(\"getCharacterInventory\", socket.getCharacterInventory);\n    this.register(\"getCharacterSpells\", socket.getCharacterSpells);\n    this.register(\"rollAttack\", socket.rollAttack);\n    this.register(\"applyDamageOrHealing\", socket.applyDamageOrHealing);\n    this.register(\"rollSavingThrow\", socket.rollSavingThrow);\n    this.register(\"handleLongRest\", socket.handleLongRest);\n    this.register(\"handleShortRest\", socket.handleShortRest);\n    this.register(\"sendCharacterSpells\", socket.sendCharacterSpells);\n    this.register(\"updateCharacterCondition\", socket.updateCharacterCondition);\n    this.register(\"updateResource\", socket.updateResource);\n    this.register(\"addItemToInventory\", socket.addItemToInventory);\n    this.register(\"removeItemFromInventory\", socket.removeItemFromInventory);\n    this.register(\"getItemDetails\", socket.getItemDetails);\n    this.register(\"sendTurnNotification\", socket.sendTurnNotification);\n    this.register(\"sendCombatSummary\", socket.sendCombatSummary);\n    this.register(\"rollOnTable\", socket.rollOnTable);\n    this.register(\"generateRandomEncounter\", socket.generateRandomEncounter);\n    this.register(\"relayChatToDiscord\", socket.relayChatToDiscord);\n    this.register(\"relayRPCommand\", socket.relayRPCommand);\n    this.register(\"useAbility\", socket.useAbility);\n    this.register(\"viewQuestLog\", socket.viewQuestLog);\n    this.register(\"addNoteToLog\", socket.addNoteToLog);\n    this.register(\"queryNpcStats\", socket.queryNpcStats);\n    this.register(\"generateRandomNpc\", socket.generateRandomNpc);\n    this.register(\"handleSessionStart\", socket.handleSessionStart);\n    this.register(\"handleSessionEnd\", socket.handleSessionEnd);\n    this.register(\"handleLogSessionNotes\", socket.handleLogSessionNotes);\n    this.register(\"updateQuestStatus\", socket.updateQuestStatus);\n    this.register(\"updateQuestObjective\", socket.updateQuestObjective);\n  }\n\n  register(name, func) {\n    if (this.functions.has(name)) {\n      debugLog(`${MODULE_NAME} | Function '${name}' is already registered, skipping duplicate.`);\n    } else {\n      debugLog(`${MODULE_NAME} | Registering function '${name}'...`);\n      this.functions.set(name, func);\n    }\n  }\n\n  async _receiveRequest(message, senderId) {\n    const { action, requestId, ...payload } = message;\n    const func = this.functions.get(action);\n  \n    if (!func) {\n      debugLog(`${MODULE_NAME} | No function registered for action '${action}'`);\n      return;\n    }\n  \n    try {\n      const result = await func(payload);\n      debugLog(`Success executing '${action}':`, result);\n  \n      game.socket.emit(this.name, {\n        action: `${action}Result`,\n        requestId,  \n        type: \"RESPONSE\",  \n        result,  \n      });\n    } catch (error) {\n      debugLog(`${MODULE_NAME} | Error executing '${action}':`, error);\n      game.socket.emit(this.name, {\n        action: `${action}Result`,\n        requestId,\n        type: \"RESPONSE\",\n        error: error.message,  \n      });\n    }\n  }\n\n  _receiveResponse(message, senderId) {\n    const { id, result, type } = message;\n    const request = this.requests.get(id);\n    if (!request) return;\n\n    if (type === \"RESULT\") {\n      debugLog(`${MODULE_NAME} | Success executing '${request.functionName}':`, result);\n      request.resolve(result);\n    } else {\n      debugLog(`${MODULE_NAME} | Error executing '${request.functionName}':`, result);\n      request.reject(new Error(`Error executing '${request.functionName}'. Check GM console for details.`));\n    }\n    this.requests.delete(id);\n  }\n\n  _received(message, senderId) {\n    if (message.type === \"REQUEST\") {\n      debugLog(`${MODULE_NAME} | Received request:`, message);\n      this._receiveRequest(message, senderId);\n    } else {\n      debugLog(`${MODULE_NAME} | Received response:`, message);\n      this._receiveResponse(message, senderId);\n    }\n  }\n\n  _sendRequest(functionName, args, recipient) {\n    const message = { functionName, args, recipient, type: \"REQUEST\", id: foundry.utils.randomID() };\n    const promise = new Promise((resolve, reject) => this.requests.set(message.id, { functionName, resolve, reject }));\n\n    debugLog(`${MODULE_NAME} | Sending request:`, message);\n    game.socket.emit(this.name, message);\n    return promise;\n  }\n\n  async executeAsGM(functionName, ...args) {\n    const func = this.functions.get(functionName);\n    if (game.user.isGM) return func(...args);\n    debugLog(`${MODULE_NAME} | Executing '${functionName}' as GM:`, args);\n    return this._sendRequest(functionName, args, \"GM\");\n  }\n}\n\nexport function setupSocket() {\n  globalThis.SocketHandler = new SocketHandler();\n  debugLog(`${MODULE_NAME} | Socket setup complete`);\n}","export const MODULE_NAME = \"discord-bot-integration\";\nconsole.log(`${MODULE_NAME} module loading...`);\n\nimport { registerHooks } from \"./hooks.js\";\nimport { setupSocket } from \"./socket.js\";\nimport { registerSettings } from \"./settings.js\";\n\nHooks.once(\"init\", async () => {\n  console.log(`${MODULE_NAME} | Initializing module`);\n\n  registerSettings();\n});\n\nHooks.once(\"ready\", () => {\n  console.log(`${MODULE_NAME} | Foundry ready, setting up hooks and socket`);\n\n  registerHooks();\n\n  setupSocket();\n});","export function registerSettings() {\n  game.settings.register(\"discord-bot-integration\", \"useEnv\", {\n    name: \"Use .env for Development\",\n    hint: \"Enable to load environment variables from a .env file during development.\",\n    scope: \"world\",\n    config: true,\n    type: Boolean,\n    default: false,\n  });\n\n  game.settings.register(\"discord-bot-integration\", \"discordApiToken\", {\n    name: \"Discord API Token\",\n    hint: \"Enter the Discord API token for the bot (required for production).\",\n    scope: \"world\",\n    config: true,\n    type: String,\n    default: \"\",\n  });\n\n  game.settings.register(\"discord-bot-integration\", \"middlewareUrl\", {\n    name: \"Middleware URL\",\n    hint: \"The URL for your FastAPI middleware that connects to Discord.\",\n    scope: \"world\",\n    config: true,\n    type: String,\n    default: \"http://localhost:8000\",\n  });\n\n  game.settings.register(\"discord-bot-integration\", \"debugMode\", {\n    name: \"Enable Debug Mode\",\n    hint: \"Enable verbose logging for debugging purposes.\",\n    scope: \"world\",\n    config: true,\n    type: Boolean,\n    default: false,\n  });\n\n  game.settings.register(\"discord-bot-integration\", \"notificationChannel\", {\n    name: \"Discord Notification Channel ID\",\n    hint: \"ID of the Discord channel where notifications will be sent.\",\n    scope: \"world\",\n    config: true,\n    type: String,\n    default: \"\",\n  });\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","debugLog","message","game","settings","MODULE_NAME","_console","_len","arguments","length","optionalParams","Array","_key","console","log","apply","concat","warn","_regeneratorRuntime","e","t","r","n","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","_arrayLikeToArray","asyncGeneratorStep","_asyncToGenerator","_next","_throw","renderCharacterStats","_x","_renderCharacterStats","_callee","actor","characterData","htmlContent","_context","hp","system","attributes","maxHp","max","ac","abilities","entries","map","_ref","_ref2","isArray","_arrayWithHoles","_iterableToArrayLimit","toString","from","test","_unsupportedIterableToArray","_nonIterableRest","toUpperCase","mod","dc","renderTemplate","ChatMessage","content","whisper","getWhisperRecipients","renderInventory","_x2","_renderInventory","_callee2","inventoryData","_context2","inventory","items","item","quantity","equipped","renderSpellDetails","_x3","_x4","_renderSpellDetails","_callee3","spellId","spell","spellData","_context3","level","description","uses","renderTurnNotification","_x5","_renderTurnNotification","_callee4","turnData","_context4","combatantName","currentHp","_slicedToArray","getCharacterStats","_getCharacterStats","request","characterStats","actorId","ready","error","actors","reduce","acc","temp","getCharacterInventory","_getCharacterInventory","filter","includes","getCharacterSpells","_getCharacterSpells","sendCharacterSpells","_sendCharacterSpells","requestId","spells","socket","emit","action","updateCharacterHP","_x6","_updateCharacterHP","_callee5","hpChange","_actor$sheet","currentHP","newHP","_context5","Number","Math","updateSource","sheet","rendered","render","t0","updateCharacterCondition","_x7","_updateCharacterCondition","_callee6","condition","add","existingEffects","conditionExists","effect","_context6","effects","label","createEmbeddedDocuments","icon","getConditionIcon","origin","uuid","disabled","find","status","Poisoned","Stunned","Blinded","updateResource","_x8","_updateResource","_callee7","resourceName","_context7","resources","update","_defineProperty","newValue","addItemToInventory","_x9","_addItemToInventory","_callee8","itemData","existingItem","newQuantity","createdItems","newItem","_context8","id","itemId","itemName","removeItemFromInventory","_x10","_removeItemFromInventory","_callee9","_request$quantity","currentQuantity","_context9","getItemDetails","_x11","_getItemDetails","_callee10","_context10","itemDetails","weight","rollInitiative","_x12","_rollInitiative","_callee11","_combatant","_initiative","combatant","initiative","retries","_game$combat$combatan","_context11","combat","combatants","undefined","setTimeout","actorName","sendTurnNotification","_x13","_sendTurnNotification","_callee12","currentCombatant","_context12","combats","active","combatantId","sendCombatSummary","_x14","_sendCombatSummary","_callee13","_context13","rollAttack","_x15","_rollAttack","_callee14","targetId","attacker","target","rollData","attackRoll","targetAC","isCritHit","isCritMiss","messageContent","baseDamageFormula","damageFormula","damageRoll","finalDamage","targetCurrentHP","targetNewHP","fumbleEvent","isHit","_targetCurrentHP","_targetNewHP","_context14","getRollData","Roll","evaluate","total","toMessage","speaker","getSpeaker","flavor","targetName","attackTotal","damageTotal","fumbleEvents","attackerDamage","floor","random","rollSavingThrow","_x16","_rollSavingThrow","_callee15","saveType","saveBonus","formula","saveName","roll","isCritSuccess","isCritFailure","success","_context15","save","skills","ability","result","applyDamageOrHealing","_x17","_applyDamageOrHealing","_callee16","amount","maxHP","actionType","changeType","chatMessage","_context16","min","abs","changeAmount","rollOnTable","_x18","_rollOnTable","_callee17","tableId","table","rollResult","resultText","_context17","tables","draw","results","getChatText","join","tableName","generateRandomEncounter","_x19","_generateRandomEncounter","_callee18","encounterType","encounterList","randomEncounter","_context18","forest","dungeon","town","encounter","relayChatToDiscord","_x20","_x21","_relayChatToDiscord","_callee19","_context19","relayRPCommand","_x22","_relayRPCommand","_callee20","characterId","character","formattedMessage","_context20","characterName","castSpell","_x23","_castSpell","_callee21","casterId","caster","spellDescription","_context21","casterName","spellName","applySpellEffects","_x24","_x25","_x26","_applySpellEffects","_callee22","_spell$system$damage","spellEffects","healingEffect","damageEffect","healingAmount","_spell$system$save","damageAmount","savingThrow","isSaveSuccessful","_context22","damage","parts","part","calculateSpellEffect","duration","units","img","changes","mode","_effect","useAbility","_x27","_useAbility","_callee23","_ability$system$uses","abilityId","abilityDescription","hasLimitedUses","msg","_context23","applyAbilityEffects","abilityName","_x28","_x29","_x30","_applyAbilityEffects","_callee24","_ability$system$damag","_ability$system$damag2","_ability$system$durat","_context24","calculateEffectValue","_effect2","viewQuestLog","_x31","_viewQuestLog","_callee25","quests","questData","categorizedQuests","formatQuestEntry","questSummary","_context25","journal","contents","entry","flags","questLog","quest","title","data","objectives","rewards","difficulty","questGiver","InProgress","q","Completed","Failed","idx","completed","updateQuestStatus","_x32","_updateQuestStatus","_callee26","questId","newStatus","updatedFlags","_context26","_objectSpread","questName","updateQuestObjective","_x33","_updateQuestObjective","_callee27","objectiveIndex","_context27","objective","addNoteToLog","_x34","_addNoteToLog","_callee28","note","updatedContent","_context28","questTitle","queryNpcStats","_x35","_queryNpcStats","_callee29","npcId","npc","npcStats","npcSummary","_context29","str","dex","con","int","wis","cha","generateRandomNpc","_x36","_generateRandomNpc","_callee30","randomNpc","randomNpcSummary","_context30","createRandomNpc","_createRandomNpc","_callee31","names","_context31","handleLongRest","_x37","_handleLongRest","_callee32","restSummary","_context32","longRest","dialog","chat","handleShortRest","_x38","_handleShortRest","_callee33","_context33","shortRest","handleSessionStart","_x39","_handleSessionStart","_callee34","sessionData","sessionTitle","participants","startTime","startMessage","_context34","Date","toLocaleString","handleSessionEnd","_x40","_handleSessionEnd","_callee35","endTime","endMessage","_context35","handleLogSessionNotes","_x41","_handleLogSessionNotes","_callee36","logData","notes","notesMessage","_context36","_objectWithoutProperties","_objectWithoutPropertiesLoose","getOwnPropertySymbols","propertyIsEnumerable","_defineProperties","_toPropertyKey","toPrimitive","String","_toPrimitive","SocketHandler","_classCallCheck","this","functions","Map","requests","on","_received","bind","register","func","has","set","_receiveRequest2","senderId","payload","_excluded","functionName","reject","_receiveRequest","_receiveResponse","args","recipient","_this","foundry","utils","randomID","promise","_executeAsGM","_args2","user","isGM","_sendRequest","Hooks","once","hint","scope","config","Boolean","default","options","userId","actorData","toJSON","parent","combatantsData","_combatant$actor","_combatant$actor2","statusEffects","combatId","round","turn","restData","restType","globalThis"],"sourceRoot":""}